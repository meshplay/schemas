/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/integrations/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections
         * @description Get connections
         */
        get: operations["GetConnections"];
        put?: never;
        /**
         * Register Connection
         * @description Register with Meshplay Cloud
         */
        post: operations["RegisterConnection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit Connection by ID
         * @description Edit registered connection using the connection ID
         */
        put: operations["EditConnectionByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of all connections
         * @description Get summary about the status of all connections
         */
        get: operations["GetConnectionStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionKind}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by kind
         * @description Get connections by kind
         */
        get: operations["GetConnectionsByKind"];
        put?: never;
        post?: never;
        /**
         * Delete connection
         * @description Delete registered connection
         */
        delete: operations["DeleteConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/{connectionKind}/{connectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by kind and connectionID.
         * @description Get connections by kind (kind is required because this API returns the results in non std format of a connection)
         */
        get: operations["GetConnectionsByKindAndConnectionID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/integrations/connections/meshplay/{meshplayServerID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Meshplay connection
         * @description Deletes a given meshplay connection. This is generally used for deleting connections from Meshplay Server UI where UI is not aware of connection IDs.
         */
        delete: operations["DeleteMeshplayConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Evaluate relationships in a design
         * @description Performs relationship evaluation on a given design, applying policies and updating components and relationships as needed.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EvaluationRequest"];
                };
            };
            responses: {
                /** @description Successful evaluation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EvaluationResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Meshplay Connections are managed and unmanaged resources that either through discovery or manual entry are tracked by Meshplay. Learn more at https://docs-meshplay.khulnasoft.com/concepts/logical/connections */
        connection: {
            /** @description ID */
            id?: components["schemas"]["uuid"];
            /** @description Connection Name */
            name?: string;
            /** @description Credential ID */
            credential_id?: components["schemas"]["uuid"];
            /** @description Connection Type */
            type?: string;
            /** @description Connection Subtype */
            sub_type?: string;
            /** @description Connection Kind */
            kind?: string;
            metadata?: Record<string, never>;
            /**
             * @description Connection Status
             * @enum {string}
             */
            status?: "discovered" | "registered" | "connected" | "ignored" | "maintenance" | "disconnected" | "deleted" | "not found";
            user_id?: components["schemas"]["uuid"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["time"];
        };
        meshplayInstance: {
            /** @description Connection id */
            id?: components["schemas"]["id"];
            /** @description Connection name */
            name?: components["schemas"]["text"];
            /** @description Connected server id */
            server_id?: components["schemas"]["text"];
            /** @description Running server version */
            server_version?: components["schemas"]["text"];
            server_location?: components["schemas"]["text"];
            /** @description Server build SHA */
            server_build_sha?: components["schemas"]["text"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["time"];
            /** @description Status */
            status?: components["schemas"]["text"];
        };
        connectionPage: {
            resultType: "connectionPage";
        } & (Omit<components["schemas"]["resultsPage"], "resultType"> & {
            connections?: components["schemas"]["connection"][];
        });
        connectionStatusInfo: {
            /** @description Connection status */
            status?: components["schemas"]["text"];
            /** @description Number of connections having the status */
            count?: number;
        };
        connectionsStatusPage: {
            connections_status?: components["schemas"]["connectionStatusInfo"][];
        };
        k8sContext: {
            id?: components["schemas"]["id"];
            name?: components["schemas"]["text"];
            auth?: components["schemas"]["map_object"];
            cluster?: components["schemas"]["map_object"];
            server?: string;
            owner?: components["schemas"]["id"];
            created_by?: components["schemas"]["id"];
            meshplay_instance_id?: components["schemas"]["id"];
            kubernetes_server_id?: components["schemas"]["id"];
            deployment_type?: string;
            updated_at?: components["schemas"]["time"];
            created_at?: components["schemas"]["time"];
        };
        k8sContextPersistResponse: {
            k8sContext?: components["schemas"]["k8sContext"];
            inserted?: boolean;
        };
        resultsPage: {
            page?: number;
            page_size?: number;
            total_count?: number;
            resultType?: string;
        };
        /**
         * Format: uuid
         * @description A Universally Unique Identifier used to uniquely identify entites in Meshplay. The UUID core defintion is used across different schemas.
         */
        uuid: string;
        /** Format: date-time */
        time: string;
        text: string;
        map_object: {
            [key: string]: string;
        };
        /** Format: uuid */
        id: string;
        model_definition: components["schemas"]["model"];
        component_definition: components["schemas"]["component"];
        /** @description Meshplay manages entities in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. Entities may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshplay for full lifecycle management. */
        capability: {
            /** @description Specifies the version of the schema to which the capability definition conforms. */
            schemaVersion: components["schemas"]["versionString"];
            /** @description Version of the capability definition. */
            version: components["schemas"]["semverString"];
            /** @description Name of the capability in human-readible format. */
            displayName: components["schemas"]["inputString"];
            /** @description A written representation of the purpose and characteristics of the capability. */
            description?: string;
            /** @description Top-level categorization of the capability */
            kind: components["schemas"]["inputString"];
            /** @description Classification of capabilities. Used to group capabilities similar in nature. */
            type: components["schemas"]["inputString"];
            /** @description Most granular unit of capability classification. The combination of Kind, Type and SubType together uniquely identify a Capability. */
            subType?: components["schemas"]["inputString"];
            /** @description Key that backs the capability. */
            key?: components["schemas"]["inputString"];
            /** @description State of the entity in which the capability is applicable. */
            entityState: components["schemas"]["inputString"][];
            /**
             * @description Status of the capability
             * @default enabled
             * @enum {string}
             */
            status: "enabled" | "disabled";
            /** @description Metadata contains additional information associated with the capability. Extension point. */
            metadata?: {
                [key: string]: unknown;
            };
        };
        relationship_definition: components["schemas"]["relationship"];
        /**
         * @description API version of the object
         * @example [
         *       "v1",
         *       "v1alpha1",
         *       "v2beta3",
         *       "v1.custom-suffix"
         *     ]
         */
        versionString: string;
        /** @description A valid semantic version string between 5 and 256 characters. The pattern allows for a major.minor.patch version followed by an optional pre-release tag like '-alpha' or '-beta.2' and an optional build metadata tag like '+build.1. */
        semverString: string;
        /** @description A string starting with an alphanumeric character. Spaces and hyphens allowed. */
        inputString: string;
        /** @description Meshplay Models serve as a portable unit of packaging to define managed entities, their relationships, and capabilities. */
        model: {
            /** @description Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design). */
            id?: components["schemas"]["uuid"];
            /**
             * @description Specifies the version of the schema used for the definition.
             * @example [
             *       "v1",
             *       "v1alpha1",
             *       "v2beta3",
             *       "v1.custom-suffix"
             *     ]
             */
            schemaVersion?: string;
            /** @description Version of the model definition. */
            version: string;
            /** @description The unique name for the model within the scope of a registrant. */
            name: string;
            /** @description Human-readable name for the model. */
            displayName?: string;
            /** @description Description of the model. */
            description?: string;
            /**
             * @description Status of model, including:
             *     - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
             *     - maintenance: model is unavailable for a period of time.
             *     - enabled: model is available for use for all users of this Meshplay Server.
             *     - ignored: model is unavailable for use for all users of this Meshplay Server.
             * @enum {string}
             */
            status?: "ignored" | "enabled" | "duplicate";
            registrant: components["schemas"]["connection"];
            /** @description Category of the model. */
            category: {
                id?: components["schemas"]["uuid"];
                name?: string;
                metadata?: Record<string, never>;
            };
            /** @description Sub-category of the model. */
            subCategory?: string;
            /** @description Metadata containing additional information associated with the model. */
            metadata?: {
                /** @description Capabilities associated with the model */
                capabilities?: components["schemas"]["capability"][];
                /** @description Indicates whether the model and its entities should be treated as deployable entities or as logical representations. */
                isAnnotation?: boolean;
                /** @description Primary color associated with the model. */
                primaryColor?: string;
                /** @description Secondary color associated with the model. */
                secondaryColor?: string;
                /** @description SVG representation of the model in white color. */
                svgWhite?: string;
                /** @description SVG representation of the model in colored format. */
                svgColor?: string;
                /** @description SVG representation of the complete model. */
                svgComplete?: string;
            } & {
                [key: string]: unknown;
            };
            /** @description Registrant-defined data associated with the model. Properties pertain to the software being managed (e.g. Kubernetes v1.31) */
            model?: {
                /**
                 * @description Version of the model as defined by the registrant.
                 * @example [
                 *       "v1",
                 *       "v1alpha1",
                 *       "v2beta3",
                 *       "v1.custom-suffix"
                 *     ]
                 */
                version: string;
            };
        };
        /** @description Common styles for all entities */
        styles: {
            /** @description Primary color of the component used for UI representation. */
            primaryColor: string;
            /** @description Secondary color of the entity used for UI representation. */
            secondaryColor?: string;
            /** @description White SVG of the entity used for UI representation on dark background. */
            svgWhite: string;
            /** @description Colored SVG of the entity used for UI representation on light background. */
            svgColor: string;
            /** @description Complete SVG of the entity used for UI representation, often inclusive of background. */
            svgComplete?: string;
            /** @description The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            color?: string;
            /** @description The opacity of the label text, including its outline. */
            "text-opacity"?: number;
            /** @description A comma-separated list of font names to use on the label text. */
            "font-family"?: string;
            /** @description The size of the label text. */
            "font-size"?: string;
            /** @description A CSS font style to be applied to the label text. */
            "font-style"?: string;
            /** @description A CSS font weight to be applied to the label text. */
            "font-weight"?: string;
            /**
             * @description A transformation to apply to the label text
             * @enum {string}
             */
            "text-transform"?: "none" | "uppercase" | "lowercase";
            /** @description The opacity of the element, ranging from 0 to 1. Note that the opacity of a compound node parent affects the effective opacity of its children.See https://js.cytoscape.org/#style/visibility */
            opacity?: number;
            /** @description An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index. */
            "z-index"?: number;
            /** @description The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id */
            label?: string;
        };
        /**
         * @description The shape of the node’s body. Note that each shape fits within the specified width and height, and so you may have to adjust width and height if you desire an equilateral shape (i.e. width !== height for several equilateral shapes)
         * @enum {string}
         */
        shape: "ellipse" | "triangle" | "round-triangle" | "rectangle" | "round-rectangle" | "bottom-round-rectangle" | "cut-rectangle" | "barrel" | "rhomboid" | "diamond" | "round-diamond" | "pentagon" | "round-pentagon" | "hexagon" | "round-hexagon" | "concave-hexagon" | "heptagon" | "round-heptagon" | "octagon" | "round-octagon" | "star" | "tag" | "round-tag" | "vee" | "polygon";
        /** @description Visualization styles for a component */
        componentStyles: WithRequired<components["schemas"]["styles"], "primaryColor" | "svgColor" | "svgWhite"> & {
            shape: components["schemas"]["shape"];
            /** @description The position of the node. If the position is set, the node is drawn at that position in the given dimensions. If the position is not set, the node is drawn at a random position. */
            position?: {
                /** @description The x-coordinate of the node. */
                x: number;
                /** @description The y-coordinate of the node. */
                y: number;
            };
            /** @description The text to display for an element’s body. Can give a path, e.g. data(id) will label with the elements id */
            "body-text"?: string;
            /** @description How to wrap the text in the node. Can be 'none', 'wrap', or 'ellipsis'. */
            "body-text-wrap"?: string;
            /** @description The maximum width for wrapping text in the node. */
            "body-text-max-width"?: string;
            /** @description The opacity of the node’s body text, including its outline. */
            "body-text-opacity"?: number;
            /** @description The colour of the node’s body text background. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "body-text-background-color"?: string;
            /** @description The size of the node’s body text. */
            "body-text-font-size"?: string;
            /** @description The colour of the node’s body text. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "body-text-color"?: string;
            /** @description A CSS font weight to be applied to the node’s body text. */
            "body-text-weight"?: string;
            /** @description A CSS horizontal alignment to be applied to the node’s body text. */
            "body-text-horizontal-align"?: string;
            /** @description A CSS text decoration to be applied to the node’s body text. */
            "body-text-decoration"?: string;
            /** @description A CSS vertical alignment to be applied to the node’s body text. */
            "body-text-vertical-align"?: string;
            /** @description The width of the node’s body or the width of an edge’s line. */
            width?: number;
            /** @description The height of the node’s body */
            height?: number;
            /** @description The colour of the node’s body. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "background-color"?: string;
            /** @description Blackens the node’s body for values from 0 to 1; whitens the node’s body for values from 0 to -1. */
            "background-blacken"?: number;
            /** @description The opacity level of the node’s background colour */
            "background-opacity"?: number;
            /** @description The size of the node’s border. */
            "border-width"?: number;
            /**
             * @description The style of the node’s border
             * @enum {string}
             */
            "border-style"?: "solid" | "dotted" | "dashed" | "double";
            /** @description The colour of the node’s border. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "border-color"?: string;
            /** @description The opacity of the node’s border */
            "border-opacity"?: number;
            /** @description The amount of padding around all sides of the node. */
            padding?: number;
            /**
             * @description The horizontal alignment of a node’s label
             * @enum {string}
             */
            "text-halign"?: "left" | "center" | "right";
            /**
             * @description The vertical alignment of a node’s label
             * @enum {string}
             */
            "text-valign"?: "top" | "center" | "bottom";
            /**
             * @description Whether to use the ghost effect, a semitransparent duplicate of the element drawn at an offset.
             * @default no
             * @enum {string}
             */
            ghost: "yes" | "no";
            /** @description The colour of the indicator shown when the background is grabbed by the user. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "active-bg-color"?: string;
            /** @description  The opacity of the active background indicator. Selector needs to be *core*. */
            "active-bg-opacity"?: string;
            /** @description  The opacity of the active background indicator. Selector needs to be *core*. */
            "active-bg-size"?: string;
            /** @description The background colour of the selection box used for drag selection. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "selection-box-color"?: string;
            /** @description The size of the border on the selection box. Selector needs to be *core* */
            "selection-box-border-width"?: number;
            /** @description The opacity of the selection box.  Selector needs to be *core* */
            "selection-box-opacity"?: number;
            /** @description The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.  Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "outside-texture-bg-color"?: string;
            /** @description The opacity of the area outside the viewport texture. Selector needs to be *core* */
            "outside-texture-bg-opacity"?: number;
        };
        /** @description Components are reusable building blocks for depicting capabilities defined within models. Learn more at https://docs-meshplay.khulnasoft.com/concepts/components */
        component: {
            /** @description Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design). */
            id?: components["schemas"]["uuid"];
            /** @description Specifies the version of the schema to which the component definition conforms. */
            schemaVersion: components["schemas"]["versionString"];
            /** @description Version of the component definition. */
            version: components["schemas"]["semverString"];
            /** @description Name of the component in human-readible format. */
            displayName?: components["schemas"]["inputString"];
            /** @description A written representation of the purpose and characteristics of the component. */
            description?: string;
            /**
             * @description Format specifies the format used in the `component.schema` field. JSON is the default.
             * @default JSON
             * @enum {string}
             */
            format: "JSON" | "CUE";
            /** @description Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs-meshplay.khulnasoft.com/concepts/models */
            model: components["schemas"]["model"];
            styles?: components["schemas"]["componentStyles"];
            /** @description Meshplay manages components in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. ComponentDefinitions may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshplay for full lifecycle management. */
            capabilities?: components["schemas"]["capability"][];
            /**
             * @description Status of component, including:
             *     - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
             *     - maintenance: model is unavailable for a period of time.
             *     - enabled: model is available for use for all users of this Meshplay Server.
             *     - ignored: model is unavailable for use for all users of this Meshplay Server.
             * @default enabled
             * @enum {string}
             */
            status: "ignored" | "enabled" | "duplicate";
            /** @description Metadata contains additional information associated with the component. */
            metadata?: {
                /** @description Genealogy represents the various representational states of the component. */
                genealogy?: string;
                /** @description Identifies whether the component is semantically meaningful or not; identifies whether the component should be treated as deployable entity or is for purposes of logical representation. */
                isAnnotation?: boolean;
                /** @description 'published' controls whether the component should be registered in Meshplay Registry. When the same 'published' property in Models, is set to 'false', the Model property takes precedence with all Entities in the Model not being registered. */
                published?: boolean;
            } & {
                [key: string]: unknown;
            };
            /** @description The configuration of the component. The configuration is based on the schema defined within the component definition(component.schema). */
            configuration?: Record<string, never>;
            /** @description Component and it's properties. */
            component: {
                /** @description Version of the component produced by the registrant. Example: APIVersion of a Kubernetes Pod. */
                version: string;
                /** @description The unique identifier (name) assigned by the registrant to this component. Example: A Kubernetes Pod is of kind 'Pod'. */
                kind: string;
                /** @description JSON schema of the object as defined by the registrant. */
                schema: string;
            };
        };
        /** @description Visualization styles for a relationship */
        edgeStyles: components["schemas"]["styles"] & {
            /** @description The animation to use for the edge. Can be like 'marching-ants' , 'blink' , 'moving-gradient',etc . */
            "edge-animation"?: string;
            /**
             * @description The curving method used to separate two or more edges between two nodes; may be haystack (very fast, bundled straight edges for which loops and compounds are unsupported), straight (straight edges with all arrows supported), bezier (bundled curved edges), unbundled-bezier (curved edges for use with manual control points), segments (a series of straight lines), taxi (right-angled lines, hierarchically bundled). Note that haystack edges work best with ellipse, rectangle, or similar nodes. Smaller node shapes, like triangle, will not be as aesthetically pleasing. Also note that edge endpoint arrows are unsupported for haystack edges.
             * @default straight
             * @enum {string}
             */
            "curve-style": "straight" | "haystack" | "bezier" | "unbundled-bezier" | "segments" | "taxi";
            /** @description The colour of the edge’s line. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "line-color"?: string;
            /**
             * @description The style of the edge’s line.
             * @enum {string}
             */
            "line-style"?: "solid" | "dotted" | "dashed";
            /**
             * @description The cap style of the edge’s line; may be butt (default), round, or square. The cap may or may not be visible, depending on the shape of the node and the relative size of the node and edge. Caps other than butt extend beyond the specified endpoint of the edge.
             * @default butt
             * @enum {string}
             */
            "line-cap": "butt" | "round" | "square";
            /**
             * @description The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge label versus the edge line. Note that the opacity value of the edge element affects the effective opacity of its line and label subcomponents.
             * @default 1
             */
            "line-opacity": number;
            /** @description The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "target-arrow-color"?: string;
            /**
             * @description The shape of the edge’s source arrow
             * @enum {string}
             */
            "target-arrow-shape"?: "triangle" | "triangle-tee" | "circle-triangle" | "triangle-cross" | "triangle-backcurve" | "vee" | "tee" | "square" | "circle" | "diamond" | "chevron" | "none";
            /**
             * @description The fill state of the edge’s source arrow
             * @enum {string}
             */
            "target-arrow-fill"?: "filled" | "hollow";
            /** @description The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)). */
            "mid-target-arrow-color"?: string;
            /**
             * @description The shape of the edge’s source arrow
             * @enum {string}
             */
            "mid-target-arrow-shape"?: "triangle" | "triangle-tee" | "circle-triangle" | "triangle-cross" | "triangle-backcurve" | "vee" | "tee" | "square" | "circle" | "diamond" | "chevron" | "none";
            /**
             * @description The fill state of the edge’s source arrow
             * @enum {string}
             */
            "mid-target-arrow-fill"?: "filled" | "hollow";
            /** @description Scaling for the arrow size. */
            "arrow-scale"?: number;
            /** @description The text to display for an edge’s source label. Can give a path, e.g. data(id) will label with the elements id */
            "source-label"?: string;
            /** @description The text to display for an edge’s target label. Can give a path, e.g. data(id) will label with the elements id */
            "target-label"?: string;
        };
        relationshipStyles: components["schemas"]["edgeStyles"] | components["schemas"]["styles"];
        /** @description Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match. */
        selector: {
            kind?: string;
            /** @description Name of the model implicated by this selector. Learn more at https://docs-meshplay.khulnasoft.com/concepts/models */
            model?: components["schemas"]["model"];
            id?: components["schemas"]["uuid"];
            match?: Record<string, never>;
            patch?: {
                /**
                 * @description patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
                 *
                 *     add: Inserts a value into an array or adds a member to an object.
                 *     replace: Replaces a value.
                 *     merge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.
                 *     strategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.
                 *     remove: Removes a value.
                 *     copy: Copies a value from one location to another.
                 *     move: Moves a value from one location to another.
                 *     test: Tests that a value at the target location is equal to a specified value.
                 * @default copy
                 * @enum {string}
                 */
                patchStrategy: "merge" | "strategic" | "add" | "remove" | "copy" | "move" | "test";
            } & ({
                /** @description JSON ref to value from where patch should be applied. */
                mutatorRef?: string[][];
            } | {
                mutatedRef?: string[][];
            });
        }[];
        /** @description Selectors are organized as an array, with each item containing a distinct set of selectors that share a common functionality. This structure allows for flexibility in defining relationships, even when different components are involved. */
        selectors: {
            /** @description Optional selectors used to define relationships which should not be created / is restricted. */
            deny?: {
                from: components["schemas"]["selector"];
                to: components["schemas"]["selector"];
            };
            /** @description Selectors used to define relationships which are allowed. */
            allow: {
                from: components["schemas"]["selector"];
                to: components["schemas"]["selector"];
            };
        }[];
        /** @description Relationships define the nature of interaction between interconnected components in Meshplay. The combination of relationship properties kind, type, and subtype characterize various genealogical relations among and between components. Relationships have selectors, selector sets, metadata, and optional parameters. Learn more at https://docs-meshplay.khulnasoft.com/concepts/logical/relationships. */
        relationship: {
            /** @description Specifies the version of the schema used for the relationship definition. */
            schemaVersion: components["schemas"]["versionString"];
            /** @description Specifies the version of the relationship definition. */
            version: components["schemas"]["semverString"];
            /** @description Name of the model in which this relationship is packaged. */
            model: components["schemas"]["model"];
            /**
             * @description Kind of the Relationship. Learn more about relationships - https://docs-meshplay.khulnasoft.com/concepts/logical/relationships.
             * @enum {unknown}
             */
            kind: components["schemas"]["inputString"];
            /** @description Classification of relationships. Used to group relationships similar in nature. */
            type: components["schemas"]["inputString"];
            /** @description Most granular unit of relationship classification. The combination of Kind, Type and SubType together uniquely identify a Relationship. */
            subType: components["schemas"]["inputString"];
            /** @description Optional. Assigns the policy to be used for the evaluation of the relationship. Deprecation Notice: In the future, this property is either to be removed or to it is to be an array of optional policy $refs. */
            evaluationQuery?: components["schemas"]["inputString"];
            /** @description Capabilities associated with the relationship. */
            capabilities?: components["schemas"]["capability"][];
            /** @description Metadata contains additional information associated with the Relationship. */
            metadata?: {
                /** @description Characterization of the meaning of the relationship and its relevance to both Meshplay and entities under management. */
                description?: components["schemas"]["inputString"];
                styles?: components["schemas"]["relationshipStyles"];
            };
            selectors?: components["schemas"]["selectors"];
        };
        meshplayPatternResource: {
            id?: components["schemas"]["id"];
            user_id?: components["schemas"]["id"];
            /** @description Name */
            name?: components["schemas"]["text"];
            /** @description Namespace */
            namepace?: components["schemas"]["text"];
            /** @description Type */
            type?: components["schemas"]["text"];
            /** @description OAM type */
            oam_type?: components["schemas"]["text"];
            deleted?: boolean;
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
        };
        meshplayPatternResourcePage: {
            resultType: "meshplayPatternResourcePage";
        } & (Omit<components["schemas"]["resultsPage"], "resultType"> & {
            resources?: components["schemas"]["meshplayPatternResource"][];
        });
        meshplayPattern: {
            id?: components["schemas"]["id"];
            user_id?: components["schemas"]["id"];
            /** @description Pattern file */
            pattern_file?: components["schemas"]["designs"];
            /** @description Pattern Name */
            name?: components["schemas"]["text"];
            location?: components["schemas"]["map_object"];
            visibility?: components["schemas"]["text"];
            catalog_data?: components["schemas"]["catalog_data"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
        };
        meshplayPatternPage: {
            resultType: "meshplayPatternPage";
        } & (Omit<components["schemas"]["resultsPage"], "resultType"> & {
            patterns?: components["schemas"]["meshplayPattern"][];
        });
        deletePatternModel: {
            id?: components["schemas"]["id"];
            /** @description Pattern name */
            name?: components["schemas"]["text"];
        };
        /**
         * Design Schema
         * @description Designs are your primary tool for collaborative authorship of your infrastructure, workflow, and processes.
         */
        designs: {
            id?: components["schemas"]["uuid"];
            /** @description Name of the design; a descriptive, but concise title for the design document. */
            name: string;
            /** @description Specifies the version of the schema to which the design conforms. */
            schemaVersion: components["schemas"]["versionString"];
            /** @description Revision of the design as expressed by an auto-incremented, SemVer-compliant version number. May be manually set by a user or third-party system, but will always be required to be of version number higher than the previously defined version number. */
            version: components["schemas"]["semverString"];
            /** @description A list of one or more component declarations. */
            components: components["schemas"]["component"][];
            /** @description Design-level preferences */
            preferences?: {
                /** @description List of available layers */
                layers: string[];
            };
            /** @description List of relationships between components */
            relationships: components["schemas"]["relationship"][];
        };
        catalog_data: {
            /** @description Tracks the specific content version that has been made available in the Catalog. */
            publishedVersion?: string;
            /** @description Published content is classifed by its support level. Content classes help you understand the origin and expected support level for each piece of content. It is important to note that the level of support may vary within each class, and you should exercise discretion when using community-contributed content. Content produced and fully supported by Meshplay maintainers. This represents the highest level of support and is considered the most reliable. Content produced by partners and verified by Meshplay maintainers. While not directly maintained by Meshplay, it has undergone a verification process to ensure quality and compatibility. Content produced and supported by the respective project or organization responsible for the specific technology. This class offers a level of support from the project maintainers themselves. Content produced and shared by Meshplay users. This includes a wide range of content, such as performance profiles, test results, filters, patterns, and applications. Community content may have varying levels of support and reliability. */
            class?: string & ("official" | "verified" | "reference architecture");
            /**
             * Model
             * @description One or more models associated with this catalog item. For designs, a list of one or more models implicated by components within the design. For models, this is self-referential.
             */
            compatibility: "kubernetes"[];
            /**
             * Caveats and Considerations
             * @description Specific stipulations to consider and known behaviors to be aware of when using this design.
             */
            pattern_caveats: string;
            /**
             * Description
             * @description Purpose of the design along with its intended and unintended uses.
             */
            pattern_info: string;
            /**
             * Type
             * @description Categorization of the type of design or operational flow depicted in this design.
             * @default Deployment
             * @enum {string}
             */
            type: "Deployment" | "Observability" | "Resiliency" | "Scaling" | "Security" | "Traffic-management" | "Troubleshooting" | "Workloads";
            /** @description Contains reference to the dark and light mode snapshots of the design. */
            snapshotURL?: string[];
        };
        /**
         * Format: email
         * @description email
         */
        email: string;
        emails: components["schemas"]["email"][];
        EvaluationRequest: {
            design: components["schemas"]["designs"];
            options?: {
                /** @description If true, only return the diff of changes instead of the complete updated design */
                returnDiffOnly?: boolean;
                /** @description If true, include detailed trace information in the response */
                enableTrace?: boolean;
            };
        };
        /** @description Schema for the response of a relationship evaluation process in Meshplay */
        EvaluationResponse: {
            /** @description Specifies the version of the schema to which the evaluation response conforms. */
            schemaVersion: components["schemas"]["inputString"];
            /** @description The final evaluated design, including all updated components and relationships. This can be either the complete updated design or only a diff of changes. The version of the design will be automatically incremented if any modifications are made during the evaluation process. This field provides a comprehensive view of the design state after all relationship evaluations and policy applications have been completed. */
            design: components["schemas"]["designs"];
            /**
             * @description Hash of the input parameters and configuration used for this evaluation. Useful for identifying duplicate evaluations or caching results.
             * @example a1b2c3d4e5f6g7h8i9j0
             */
            evaluationHash?: string;
            /**
             * Format: date-time
             * @description ISO 8601 formatted timestamp of when the evaluation was completed.
             */
            timestamp?: string;
            /** @description A detailed trace of the evaluation process, including actions taken and changes made. */
            trace: {
                /** @description List of policy actions applied during the evaluation. */
                policyActions: string[];
                /** @description List of new relationships added to the design. */
                relationshipsAdded: components["schemas"]["relationship"][];
                /** @description List of relationships removed from the design. */
                relationshipsRemoved: components["schemas"]["relationship"][];
                /** @description List of new components added to the design. */
                componentsAdded: components["schemas"]["component"][];
                /** @description List of components removed from the design. */
                componentsRemoved: components["schemas"]["component"][];
            };
        };
        workspace: {
            ID?: components["schemas"]["general_id"];
            name?: components["schemas"]["text"];
            description?: components["schemas"]["text"];
            organization_id?: components["schemas"]["organization_id"];
            owner?: components["schemas"]["text"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["nullTime"];
        };
        workspacesTeamsMapping: {
            ID?: components["schemas"]["general_id"];
            team_id?: components["schemas"]["team_id"];
            workspace_id?: components["schemas"]["workspace_id"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["nullTime"];
        };
        workspacesEnvironmentsMapping: {
            ID?: components["schemas"]["general_id"];
            environment_id?: components["schemas"]["environment_id"];
            workspace_id?: components["schemas"]["workspace_id"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["nullTime"];
        };
        workspacesViewsMapping: {
            ID?: components["schemas"]["general_id"];
            view_id?: components["schemas"]["view_id"];
            workspace_id?: components["schemas"]["workspace_id"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["nullTime"];
        };
        workspacesDesignsMapping: {
            ID?: components["schemas"]["general_id"];
            design_id?: components["schemas"]["design_id"];
            workspace_id?: components["schemas"]["workspace_id"];
            created_at?: components["schemas"]["time"];
            updated_at?: components["schemas"]["time"];
            deleted_at?: components["schemas"]["nullTime"];
        };
        workspaceUpdatePayload: {
            /** @description Name of workspace */
            name?: components["schemas"]["text"];
            /** @description Environment description */
            description?: components["schemas"]["text"];
            /** @description Organization ID */
            organization_id: string;
        };
        workspacePayload: {
            /** @description Name */
            name: components["schemas"]["text"];
            /** @description Environment description */
            description?: components["schemas"]["text"];
            /** @description Organization ID */
            organization_id?: string;
        };
        workspacePage: {
            page?: components["schemas"]["number"];
            page_size?: components["schemas"]["number"];
            total_count?: components["schemas"]["number"];
            workspaces?: components["schemas"]["workspace"][];
        };
        /** Format: uuid */
        general_id: string;
        /** Format: uuid */
        organization_id: string;
        /** @description SQL null Timestamp to handle null values of time. */
        nullTime: string;
        /** Format: uuid */
        team_id: string;
        /** Format: uuid */
        workspace_id: string;
        /** Format: uuid */
        environment_id: string;
        /** Format: uuid */
        view_id: string;
        /** Format: uuid */
        design_id: string;
        number: number;
    };
    responses: {
        /** @description ok */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Expired JWT token used or insufficient privilege */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
        /** @description Internal server error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "text/plain": string;
            };
        };
    };
    parameters: {
        /** @description Connection kind (eg: Meshplay) */
        connectionKind: components["schemas"]["text"];
        /** @description Connection ID */
        connectionId: components["schemas"]["id"];
        /** @description Meshplay server ID */
        serverId: components["schemas"]["id"];
        /** @description Get reponses by page */
        page: string;
        /** @description Get reponses by pageSize */
        page_size: string;
        /** @description Get responses that match search param value */
        search: string;
        /** @description Get ordered responses */
        order: string;
    };
    requestBodies: {
        connectionPayload: {
            content: {
                "application/json": {
                    /** @description Kind */
                    kind?: components["schemas"]["text"];
                    /** @description Connection type */
                    type?: components["schemas"]["text"];
                    /** @description Connection subtype */
                    sub_type?: components["schemas"]["text"];
                    credential_secret?: components["schemas"]["map_object"];
                    metadata?: components["schemas"]["map_object"];
                };
            };
        };
        /** @description Body for upserting meshplay pattern resource */
        meshplayPatternResource: {
            content: {
                "application/json": components["schemas"]["meshplayPatternResource"];
            };
        };
        /** @description Body for upserting meshplay pattern */
        meshplayPatternRequestBody: {
            content: {
                "application/json": {
                    url?: components["schemas"]["text"];
                    path?: components["schemas"]["text"];
                    save?: boolean;
                    pattern_data?: components["schemas"]["meshplayPattern"];
                };
            };
        };
        /** @description Body for deleting meshplay pattern */
        meshplayPatternDeleteRequestBody: {
            content: {
                "application/json": {
                    patterns?: components["schemas"]["deletePatternModel"][];
                };
            };
        };
        /** @description Body for sharing design */
        designShare: {
            content: {
                "application/json": {
                    emails: components["schemas"]["emails"];
                    id: components["schemas"]["id"];
                    content_type: string;
                    share: boolean;
                };
            };
        };
        /** @description Body for creating workspace */
        workspacePayload: {
            content: {
                "application/json": components["schemas"]["workspacePayload"];
            };
        };
        /** @description Body for updating workspace */
        workspaceUpdatePayload: {
            content: {
                "application/json": components["schemas"]["workspaceUpdatePayload"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetConnections: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: components["parameters"]["page"];
                /** @description Get reponses by pageSize */
                page_size?: components["parameters"]["page_size"];
                /** @description Get responses that match search param value */
                search?: components["parameters"]["search"];
                /** @description Get ordered responses */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of connections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["connectionPage"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    RegisterConnection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["connectionPayload"];
        responses: {
            /** @description Inserted connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["connection"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    EditConnectionByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection ID */
                connectionId: components["parameters"]["connectionId"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["connectionPayload"];
        responses: {
            /** @description Edited connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["connection"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    GetConnectionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Status of connections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["connectionsStatusPage"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    GetConnectionsByKind: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: components["parameters"]["page"];
                /** @description Get reponses by pageSize */
                page_size?: components["parameters"]["page_size"];
                /** @description Get responses that match search param value */
                search?: components["parameters"]["search"];
                /** @description Get ordered responses */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshplay) */
                connectionKind: components["parameters"]["connectionKind"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connections by kind */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    DeleteConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshplay) */
                connectionKind: components["parameters"]["connectionKind"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted connection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["connection"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    GetConnectionsByKindAndConnectionID: {
        parameters: {
            query?: {
                /** @description Get reponses by page */
                page?: components["parameters"]["page"];
                /** @description Get reponses by pageSize */
                page_size?: components["parameters"]["page_size"];
                /** @description Get responses that match search param value */
                search?: components["parameters"]["search"];
                /** @description Get ordered responses */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Connection kind (eg: Meshplay) */
                connectionKind: components["parameters"]["connectionKind"];
                /** @description Connection ID */
                connectionId: components["parameters"]["connectionId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connections by kind */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["k8sContextPersistResponse"];
                };
            };
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
    DeleteMeshplayConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Meshplay server ID */
                meshplayServerID: components["parameters"]["serverId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["200"];
            401: components["responses"]["401"];
            500: components["responses"]["500"];
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
