{
  "$id": "https://schemas.meshplay.khulnasoft.com/component.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Components are reusable building blocks for depicting capabilities defined within models. Learn more at https://docs-meshplay.khulnasoft.com/concepts/components",
  "additionalProperties": false,
  "type": "object",
  "properties": {
    "id": {
      "description": "Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design).",
      "$ref": "../core.json#/definitions/uuid"
    },
    "schemaVersion": {
      "$ref": "../core.json#/definitions/versionString",
      "description": "Specifies the version of the schema to which the component definition conforms."
    },
    "version": {
      "$ref": "../core.json#/definitions/semverString",
      "description": "Version of the component definition.",
      "minLength": 1,
      "maxLength": 50
    },
    "displayName": {
      "$ref": "../core.json#/definitions/inputString",
      "description": "Name of the component in human-readible format."
    },
    "description": {
      "type": "string",
      "description": "A written representation of the purpose and characteristics of the component."
    },
    "format": {
      "type": "string",
      "enum": ["JSON", "CUE"],
      "default": "JSON",
      "description": "Format specifies the format used in the `component.schema` field. JSON is the default."
    },
    "model": {
      "$ref": "./model.json",
      "description": "Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs-meshplay.khulnasoft.com/concepts/models",
      "x-oapi-codegen-extra-tags": {
        "gorm": "foreignKey:ModelId;references:Id"
      }
    },
    "styles": {
      "$ref": "../core.json#/definitions/componentStyles"
    },
    "capabilities": {
      "type": "array",
      "description": "Meshplay manages components in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. ComponentDefinitions may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshplay for full lifecycle management.",
      "items": {
        "$ref": "../v1alpha1/capability.json"
      }
    },
    "status": {
      "type": "string",
      "description": "Status of component, including:\n- duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.\n- maintenance: model is unavailable for a period of time.\n- enabled: model is available for use for all users of this Meshplay Server.\n- ignored: model is unavailable for use for all users of this Meshplay Server.",
      "default": "enabled",
      "enum": ["ignored", "enabled", "duplicate"],
      "x-oapi-codegen-extra-tags": {
        "yaml": "status",
        "json": "status"
      }
    },
    "metadata": {
      "type": "object",
      "description": "Metadata contains additional information associated with the component.",
      "properties": {
        "genealogy": {
          "type": "string",
          "description": "Genealogy represents the various representational states of the component."
        },
        "isAnnotation": {
          "type": "boolean",
          "description": "Identifies whether the component is semantically meaningful or not; identifies whether the component should be treated as deployable entity or is for purposes of logical representation."
        },
        "isNamespaced": {
          "type": "boolean",
          "description": "Identifies whether the component is scoped to namespace or clsuter wide."
        },
        "published": {
          "type": "boolean",
          "description": "'published' controls whether the component should be registered in Meshplay Registry. When the same 'published' property in Models, is set to 'false', the Model property takes precedence with all Entities in the Model not being registered."
        }
      },
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      },
      "additionalProperties": true
    },
    "configuration": {
      "description": "The configuration of the component. The configuration is based on the schema defined within the component definition(component.schema).",
      "type": "object",
      "$comment": "The configuration of the component. The configuration is based on the schema defined within the component definition(component.schema).",
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      }
    },
    "component": {
      "type": "object",
      "description": "Component and it's properties.",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of the component produced by the registrant. Example: APIVersion of a Kubernetes Pod."
        },
        "kind": {
          "type": "string",
          "description": "The unique identifier (name) assigned by the registrant to this component. Example: A Kubernetes Pod is of kind 'Pod'."
        },

        "schema": {
          "type": "string",
          "description": "JSON schema of the object as defined by the registrant."
        }
      },
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      },
      "required": [
        "version",
        "kind",
        "schema"
      ]
    }
  },
  "required": ["schemaVersion", "version", "model", "component"]
}

