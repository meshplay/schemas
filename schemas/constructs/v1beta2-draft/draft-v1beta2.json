{
  "$id": "https://schemas.meshplay.khulnasoft.com/component.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Components are reusable building blocks for depicting capabilities defined within models. Learn more at https://docs-meshplay.khulnasoft.com/concepts/components",
  "additionalProperties": false,
  "type": "object",
  "properties": {
    "schemaVersion": {
      "type": "string",
      "description": "Specifies the version of the schema to which the component definition conforms."
    },
    "version": {
      "type": "string",
      "description": "Specifies the version of the component definition."
    },
    "displayName": {
      "$ref": "https://schemas.meshplay.khulnasoft.com/core.json#inputString",
      "description": "Name of the component in human-readible format."
    },
    "description": {
      "type": "string",
      "description": "A written representation of the purpose and characteristics of the component."
    },
    "format": {
      "type": "string",
      "enum": [
        "JSON",
        "CUE"
      ],
      "default": "JSON",
      "description": "Format specifies the format used in the `component.schema` field. JSON is the default."
    },
    "model": {
      "$ref": "https://schemas.meshplay.khulnasoft.com/v1beta1/model.json#",
      "description": "Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs-meshplay.khulnasoft.com/concepts/models"
    },
    "metadata": {
      "type": "object",
      "description": "Metadata contains additional information associated with the component.",
      "required": [
        "shape",
        "primaryColor",
        "svgColor",
        "svgWhite"
      ],
      "properties": {
        // Future: extrapolate `capabilities` properties into first-class properties.
        // define a proper json schema for capabilities
        "capabilities": {
          "type": "object",
          "description": "Meshplay manages components in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. ComponentDefinitions may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshplay for full lifecycle management."
        },
        "genealogy": {
          "type": "string",
          "description": "Genealogy represents the various representational states of the component."
        },
        // Proposal:
        // Remove this property, which currently only serves to complicate the coordination between component properties and relationship evaluations.
        //Future consideration for being of this property, having this property dictated by the result of relationship evaluation.
        // The presence or absence of a relationship doesn't not affect the initial representation of the node group on the canvas. All components are represented as nodes upon initial drop onto the canvas and only convert in their visual representation to a node group post-evaluation.
        // type: "edge"
        // from: "kubernetes"
        // kind: "Pod"
        // {
        //   to: "kubernetes"
        //   kind: "self"
        //   to: "kubernetes"
        //   kind: "non-self"
        // }
        "isAnnotation": {
          "type": "boolean",
          "description": "Identifies whether the component is semantically meaningful or not; identifies whether the component should be treated as deployable entity or is for purposes of logical representation."
        },
        "shape": {
          "type": "string",
          "description": "Shape of the component used for UI representation.",
          "enum": [
            "ellipse",
            "triangle",
            "round-triangle",
            "rectangle",
            "round-rectangle",
            "bottom-round-rectangle",
            "cut-rectangle",
            "barrel",
            "rhomboid",
            "diamond",
            "round-diamond",
            "pentagon",
            "round-pentagon",
            "hexagon",
            "round-hexagon",
            "concave-hexagon",
            "heptagon",
            "round-heptagon",
            "octagon",
            "round-octagon",
            "star",
            "tag",
            "round-tag",
            "vee"
          ]
        },
        "primaryColor": {
          "type": "string",
          "description": "Primary color of the component used for UI representation."
        },
        "secondaryColor": {
          "type": "string",
          "description": "Secondary color of the component used for UI representation."
        },
        "svgWhite": {
          "type": "string",
          "description": "White SVG of the component used for UI representation on dark background."
        },
        "svgColor": {
          "type": "string",
          "description": "Colored SVG of the component used for UI representation on light background."
        },
        "svgComplete": {
          "type": "string",
          "description": "Complete SVG of the component used for UI representation, often inclusive of background."
        },
        // This should probably becomes status as it is a mutable attribute of the component.
        // and would be an enum of:
        "status": [
          "ignore",
          "publish",
          "duplicate", // this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the "duplicate" status.
          "maintenance"
        ], // unavailable for a period of time
        // should be probably removed in favor of status
        "published": {
          "type": "boolean",
          "description": "'published' controls whether the component should be registered in Meshplay Registry. When the same 'published' property in Models, is set to 'false', the Model property takes precedence with all Entities in the Model not being registered."
        }
      },
      "additionalProperties": true
    },
    "component": {
      "type": "object",
      "description": "Component and it's properties.",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of the component produced by the registrant. Example: APIVersion of a Kubernetes Pod."
        },
        "kind": {
          "type": "string",
          "description": "The unique identifier (name) assigned by the registrant to this component. Example: A Kubernetes Pod is of kind 'Pod'."
        },
        "schema": {
          "type": "string",
          "description": "JSON schema of the object as defined by the registrant."
        }
      },
      "required": [
        "version",
        "kind",
        "schema"
      ]
    }
  },
  "required": [
    "schemaVersion",
    "version",
    "model",
    "component"
  ]
}